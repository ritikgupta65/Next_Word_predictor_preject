from flask import Flask, request, render_template
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences
import numpy as np
import pickle

app = Flask(__name__)

# Load the Keras model
try:
    model = tf.keras.models.load_model('model.h5', compile=False)
except Exception as e:
    print(f"Error loading model: {e}")

# Load the tokenizer
with open('tokenizer.pickle', 'rb') as handle:
    tokenizer = pickle.load(handle)

# Create a reverse word index for faster lookup
reverse_word_index = {index: word for word, index in tokenizer.word_index.items()}

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/submit', methods=['POST' ,'GET'])
def submit():
    text = request.form['text']
    num_words = int(request.form['no_of_words'])
    
    # Ensure the input text is tokenized and words are predicted in sequence
    for i in range(num_words):
        # Tokenize and pad the current text
        tokenized_text = tokenizer.texts_to_sequences([text])[0]
        padded_text = pad_sequences([tokenized_text], maxlen=62, padding='pre')

        print(f"Tokenized text: {tokenized_text}")
        print(f"Padded text: {padded_text}")

        # Get the prediction probabilities
        prediction = model.predict(padded_text)
        next_word_index = np.argmax(prediction)

        print(f"Prediction array: {prediction}")
        print(f"Predicted next word index: {next_word_index}")

        # Get the predicted next word
        next_word = reverse_word_index.get(next_word_index, None)
        
        # If a valid next word is found, append it to the input text
        if next_word:
            text += " " + next_word + "codno"
        else:
            print("No valid word found for index:", next_word_index)
            break  # Stop if no valid word is found

    # Output the final predicted text
    output = text 
    return render_template('index.html', prediction_text=f'Prediction: {output}')
if __name__ == "__main__":
    app.run(debug=True)